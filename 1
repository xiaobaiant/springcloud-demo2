#Eureka单机版执行流程
##1.创建eureka服务注册中心【cloud-eureka-server7001】
##1.1 添加eureka-server依赖
```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
</dependency>
```
##1.2修改yml文件
```yml
eureka:
  server:
    enable-self-preservation: true #开启eureka的自我保护机制
  instance:
    hostname: localhost #eureka服务端的实例名称
  client:
    #false表示不向注册中心注册自己。
    register-with-eureka: false
    #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    fetch-registry: false
    service-url:
      #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
```
###1.3启动类上添加eruekaserver在注解
```java
@SpringBootApplication
@EnableEurekaServer
public class EurekaMain7001 {
    public static void main(String[] args) {
        SpringApplication.run(EurekaMain7001.class,args);
    }
}

```
##2.cloud-provider-payment001作为服务提供给者注入到Eureka中
###2.1添加eureka-client依赖
```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
```
###2.2修改配置文件
```yml
eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      defaultZone: http://localhost:7001/eureka
```
###2.3 启动类添加注解
```java
@SpringBootApplication
//服务提供提供者
@EnableEurekaClient
public class  PaymentMain8001 {
    public static void main(String[] args) {
        SpringApplication.run(PaymentMain8001.class, args);

    }
}
```

##3.创建服务消费者cloud-provider-order80
###3.1添加eureka-client依赖
```xml
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
```
###3.2修改配置文件
```yml
eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      defaultZone: http://localhost:7001/eureka
```
###3.3 启动类添加注解
```java
@SpringBootApplication
@EnableEurekaClient
public class OrderMain80 {
    public static void main(String[] args) {
        SpringApplication.run(OrderMain80.class, args);
    }
}
```
##4服务执行流程
1.cloud-erueka-server7001：作为服务提供者提供服务
    主要逻辑:创建一个服务服务注册中心,配置服务注册中心
2.cloud-provide-payment8001：创建一个服务提供者将其注入到服务注册中心中
    主要逻辑：服务逻辑,从EurekaServer抓取已有的注册信息,配置访问服务中心的路由